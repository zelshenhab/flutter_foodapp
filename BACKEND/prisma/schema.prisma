generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")  // pooled (runtime)
  directUrl = env("DIRECT_URL")    // direct (migrations)
}

model User {
  id            Int            @id @default(autoincrement())
  phone         String         @unique
  name          String?
  avatarUrl     String?
  createdAt     DateTime       @default(now())
  refreshTokens RefreshToken[]

  // back-relations
  cart   Cart?
  orders Order[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  revoked   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
}

model OtpRequest {
  id        Int      @id @default(autoincrement())
  phone     String
  code      String
  requestId String   @unique
  expiresAt DateTime
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
}

model Category {
  id       Int        @id @default(autoincrement())
  title    String
  slug     String     @unique
  position Int        @default(0)
  items    MenuItem[]
}

model MenuItem {
  id          Int     @id @default(autoincrement())
  categoryId  Int
  title       String
  slug        String  @unique
  description String?
  imageUrl    String?
  basePrice   Decimal @db.Decimal(10, 2)
  isActive    Boolean @default(true)
  isPopular   Boolean @default(false)

  category     Category          @relation(fields: [categoryId], references: [id])
  optionGroups MenuOptionGroup[]

  // back-relations
  cartItems  CartItem[]
  orderItems OrderItem[]
}

model MenuOptionGroup {
  id     Int    @id @default(autoincrement())
  itemId Int
  title  String
  type   String
  min    Int    @default(0)
  max    Int    @default(1)

  item    MenuItem     @relation(fields: [itemId], references: [id])
  options MenuOption[]
}

model MenuOption {
  id         Int     @id @default(autoincrement())
  groupId    Int
  title      String
  priceDelta Decimal @default(0) @db.Decimal(10, 2)

  group MenuOptionGroup @relation(fields: [groupId], references: [id])
}

model Promo {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  title       String
  description String?
  type        String // "percent" | "fixed"
  value       Decimal   @db.Decimal(10, 2)
  validFrom   DateTime?
  validTo     DateTime?
  minSubtotal Decimal?  @default(0) @db.Decimal(10, 2)
  active      Boolean   @default(true)
}

enum OrderStatus {
  pending
  preparing
  delivering
  completed
  cancelled
}

enum PaymentMethod {
  cod
  card
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  items     CartItem[]
  promoCode String?
  updatedAt DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model CartItem {
  id                Int     @id @default(autoincrement())
  cartId            Int
  menuItemId        Int
  quantity          Int     @default(1)
  unitPriceSnapshot Decimal @db.Decimal(10, 2)
  optionsJson       Json
  lineTotal         Decimal @db.Decimal(10, 2)

  cart     Cart     @relation(fields: [cartId], references: [id])
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])
}

model Order {
  id              Int           @id @default(autoincrement())
  userId          Int
  status          OrderStatus   @default(pending)
  paymentMethod   PaymentMethod
  paymentStatus   String?
  subtotal        Decimal       @db.Decimal(10, 2)
  discount        Decimal       @default(0) @db.Decimal(10, 2)
  deliveryFee     Decimal       @default(0) @db.Decimal(10, 2)
  total           Decimal       @db.Decimal(10, 2)
  addressSnapshot Json
  promoCode       String?
  notes           String?
  createdAt       DateTime      @default(now())

  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]
  @@index([userId, createdAt])
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  orderId     Int
  menuItemId  Int
  titleSnap   String
  optionsSnap Json
  unitPrice   Decimal @db.Decimal(10, 2)
  quantity    Int
  lineTotal   Decimal @db.Decimal(10, 2)

  order    Order    @relation(fields: [orderId], references: [id])
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])
  @@index([orderId])
}
